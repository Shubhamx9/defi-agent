"""
Pydantic schemas for API requests and responses.
Defines data models for the DeFi AI Assistant API.
"""

from pydantic import BaseModel, Field, validator
from typing import Optional, Dict, Any, List, Union
from enum import Enum
from datetime import datetime


class QueryResponse(BaseModel):
    """
    Response model for a query to the DeFi AI Assistant.
    """
    answer: str = Field(..., description="The answer generated by the AI assistant.")

class UserQuery(BaseModel):
    """
    Request model for a user query to the DeFi AI Assistant.
    """
    query: str = Field(..., description="The user's query.")
    user_id: str = Field(..., description="Unique identifier for the user.")
    wallet_address: Optional[str] = Field(None, description="User's wallet address (required for action intents).")
    wallet_secret: Optional[str] = Field(None, description="User's wallet private key/secret (required for action intents).")
    # session_token = Field(..., description="Session token for authentication.", default=None)


class IntentType(str, Enum):
    GENERAL_QUERY = "general_query"
    ACTION_REQUEST = "action_intent"
    CLARIFICATION = "clarification"

class IntentClassificationResult(BaseModel):
    """Schema for intent classification response."""
    intent: IntentType = Field(..., description="Classified intent type")

